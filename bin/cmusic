#!/usr/bin/perl -w

BEGIN {
    use Cwd 'realpath';
    use File::Basename;
    chdir(dirname(realpath(__FILE__)) . '/../');
    unshift(@INC, 'lib');
    $SIG{TERM} = \&kill_and_exit;
    $0 = 'cmusic';
}

use POSIX ":sys_wait_h";
use Term::ANSIColor qw(:constants);
$Term::ANSIColor::AUTORESET = 1;
use Encode;
use LWP::UserAgent;
use JSON;
use Data::Dumper;

our (
    $channel_id,
    $config,
    %songs,
    %bore_songs,
    $runtime_path,
    @playlist,
    $player_pid
);

sub init{
    # Set .cmusic directory
    $runtime_path = "$ENV{HOME}/.cmusic/";

    # Read config
    $config = from_jsonfile('conf/cmusic.json');

    # Set channel id
    $channel_id = from_runtime('cmusic.runtime.channel_id')
    or $channel_id = get_conf('baidu_music.default_channel_id');
}

sub get_conf{
    my ($key) = @_;
    my $conf = $config;
    for (split('\.', $key)){
        $conf = $conf->{$_};
    }
    return $conf;
}

sub get_runtime_file{
    return "$runtime_path/" . get_conf(@_);
}

sub refresh_bore_songs{
    my $bore = from_runtime('cmusic.runtime.bore');
    %bore_songs = map { ($_, $bore->{$_}) } keys %$bore;
}

sub from_jsonfile{
    my $json = file_get_contents(@_) or return undef;
    return JSON->new->utf8->relaxed->allow_barekey->allow_singlequote->allow_nonref->decode($json);
}

sub to_jsonfile{
    my ($file, $perl_scalar) = @_;
    my $json = JSON->new->utf8->allow_nonref->encode($perl_scalar);
    file_put_contents($file, $json);
}

sub from_runtime{
    return from_jsonfile(get_runtime_file(@_));
}

sub to_runtime{
    my ($conf, $perl_scalar) = @_;
    my $file = get_runtime_file($conf);
    to_jsonfile($file, $perl_scalar);
}

sub rm_runtime{
    my $file = get_runtime_file(@_);
    unlink($file);
}

sub file_get_contents{
    my ($file) = @_;
    open(my $fh, $file) or return undef;
    my $contents = '';
    while (<$fh>){
        $contents.= $_;
    }
    close $fh;
    return $contents;
}

sub file_put_contents{
    my ($file, $contents) = @_;
    open(my $fh, '>', $file) or return 0;
    print $fh $contents;
    close($fh);
}

sub set_channel{
    my ($index) = @_;
    my $channel = from_runtime('cmusic.runtime.channels');
    $channel or $channel = refresh_channel();
    $channel_id = $channel->{channel_list}->[$index]->{channel_id};
    to_runtime('cmusic.runtime.channel_id', $channel_id);
}

sub http_get{
    my ($url, $param) = @_;
    my $ua = LWP::UserAgent->new;
    $ua->agent('cmusic 2.0');
    $ua->timeout(10);
    $ua->env_proxy;
    while (my ($key, $value) = each %$param){
        $url.= "&$key=$value";
    }
    my $res = $ua->get($url);
    return ($res->is_success) ? $res->content : '';
}

sub refresh_channel{
    my $html = http_get(get_conf('baidu_music.channel_list'));
    ($html) = grep(/rawChannelList/, split("\n", $html));
    my ($json) = $html =~ m/(\{.*\})/;
    file_put_contents(get_runtime_file('cmusic.runtime.channels'), $json);
    my $channel = JSON->new->utf8->decode($json);
    return $channel;
}

sub refresh_playlist{
    my $json = http_get(get_conf('baidu_music.playlist'), {
        id => $channel_id
    });
    my $data = JSON->new->utf8->decode($json);
    my $list = $data->{list};
    my @list_id = map { $_->{id} } @$list;
    add_playlist(@list_id);
}

sub add_playlist{
    push(@playlist, @_);
}

sub get_playlist{
    my ($count) = @_;
    my @list = ();
    for (1 .. $count){
        @playlist or last;
        my $one = shift(@playlist);
        push(@list, $one);
    }
    return @list;
}

sub is_playlist_empty{
    my ($count) = @_;
    return (@playlist < $count);
}

sub refresh_songs{
    my ($count) = @_;
    is_playlist_empty($count) and refresh_playlist();
    my $song_ids = join(',', get_playlist($count));
    my $json = http_get(get_conf('baidu_music.songs'), {
        rate => get_conf('baidu_music.rate'),
        songIds => $song_ids
    });
    my $data = JSON->new->utf8->decode($json);
    my $song_list = $data->{data}->{songList};
    add_song(@$song_list);
}

sub add_song{
    push(@songs, @_);
}

sub is_songs_empty{
    return (@songs == 0);
}

sub get_song{
    return shift @songs;
}

sub play_song{
    refresh_bore_songs();
    is_songs_empty() and refresh_songs(10);
    my $song = get_song();
    to_runtime('cmusic.runtime.song', $song);
    if (!is_bore_song($song)){
        _player($song->{showLink});
    }
}

sub is_bore_song{
    my ($song) = @_;
    my $song_id = $song->{songId};
    return exists($bore_songs{$song_id});
}

sub _player{
    my ($url) = @_;
    my $cmd = get_conf('player.cmd');
    $player_pid = fork();
    if ($player_pid > 0){
        to_runtime('player.runtime.pid', $player_pid);
        wait;
    } elsif ($player_pid == 0){
        reopen_std(
            '/dev/null',
            get_runtime_file('player.log.info'),
            get_runtime_file('player.log.error')
        );
        exec(@$cmd, $url);
    }
}

sub main{
    my $action = shift(@ARGV);
    my %funs = (
        'list|l'   => 'list',
        'play|p'   => 'play',
        'stop|k'   => 'stop',
        'show|s'   => 'show',
        'like|i'   => 'like',
        'bore|b'   => 'bore',
        'help'     => 'help',
    );
    if ($action and my ($key) = grep { $action =~ /^($_)$/; } keys %funs){
        return $funs{$key}->(@ARGV);
    } else {
        return help();
    }
}

sub like{
    my $song = check_song_file("Which song do you like?");
    append_song_file('cmusic.runtime.like', $song);
    printf("We like %s - %s\n", encode_utf8($song->{songName}), encode_utf8($song->{artistName}));
}

sub bore{
    my $song = check_song_file("Which song bored you?");
    append_song_file('cmusic.runtime.bore', $song);
    printf("Never play %s - %s\n", encode_utf8($song->{songName}), encode_utf8($song->{artistName}));
    refresh_bore_songs();
    get_player_pid() and play();
}

sub append_song_file{
    my ($conf, $one) = @_;
    my $songs = from_runtime($conf);
    $songs->{$one->{songId}} = {
        name   => $one->{songName},
        artist => $one->{artistName}
    };
    to_runtime($conf, $songs);
}

sub check_song_file{
    my ($msg) = @_;
    my $song = from_runtime('cmusic.runtime.song');
    if (!$song){
        print "$msg\n";
        exit 1;
    }
    return $song;
}

sub show{
    my $song = check_song_file("Play song first!");
    my $detail = "%s:\nAlbum:\t%s\nName:\t%s\nArtist:\t%s\nRate:\t%skbps\nSize:\t%.2fM\nTime:\t%.2fmin\n";
    if ($song){
        printf($detail,
            get_player_pid() ? 'We are playing' : 'Last song',
            encode_utf8($song->{albumName}),
            encode_utf8($song->{songName}),
            encode_utf8($song->{artistName}),
            $song->{rate},
            ($song->{size} / 1024 / 1024),
            ($song->{time} / 60)
        );
    } else {
        print "No details of song!\n";
    }
}

sub list{
    my $channel = refresh_channel()->{channel_list};
    my $i = 0;
    for (@$channel){
        printf("%2d\t%s\n", $i, encode_utf8($_->{channel_name}));
        $i ++;
    }
}

sub play{
    @_ and set_channel(@_);
    stop();
    get_conf('cmusic.daemonize') and daemon();
    to_runtime('cmusic.runtime.pid', $$);
    while (1){
        play_song();
    }
}

sub get_player_pid{
    my $pid = from_runtime('cmusic.runtime.pid');
    return ($pid && kill(0, $pid)) ? $pid : 0;
}

sub stop{
    my $pid = get_player_pid();
    if ($pid){
        kill(SIGTERM, $pid);
    }
}

sub kill_and_exit{
    $player_pid and kill(SIGTERM, $player_pid) and rm_runtime('player.runtime.pid');
    rm_runtime('cmusic.runtime.pid');
    exit(0);
}

sub help{
    print "CMusic 2.0, play online music, enjoy!\n";
    print "Useage: cmusic [options][args]\n\n";
    print "Options:\n";
    print "list|l                  List all channels\n";
    print "play|p [channel_index]  Start playing music\n";
    print "stop|k                  Stop play\n";
    print "show|s                  Show details of current song\n";
    print "like|i                  I like current song\n";
    print "bore|b                  Current song is boring\n";
    print "help                    Show this message\n";
    print "\n\nMail bug reports and suggestions to <chenyaosf\@gmail.com>.\n";
}

sub daemon{
    my $pid = fork();
    if ($pid > 0) {
        exit 0;
    } elsif ($pid < 0) {
        exit 1;
    }
    POSIX::setsid();
    reopen_std(
        '/dev/null',
        get_runtime_file('cmusic.log.info'),
        get_runtime_file('cmusic.log.error')
    );
}

sub reopen_std{
    my ($in, $out, $err) = @_;
    close STDIN;
    close STDOUT;
    close STDERR;
    open STDIN, '<', $in;
    open STDOUT, '+>', $out;
    open STDERR, '+>', $err;
}

init();
main();
