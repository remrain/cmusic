#!/usr/bin/perl -w

BEGIN {
    use Cwd 'realpath';
    use File::Basename;
    chdir(dirname(realpath(__FILE__)) . '/../');
    unshift(@INC, 'lib');
    $SIG{TERM} = \&kill_and_exit;
    $0 = 'cmusic';
}

use POSIX ":sys_wait_h";
use threads;
use threads::shared;
use Term::ANSIColor qw(:constants);
$Term::ANSIColor::AUTORESET = 1;
use Encode;
use LWP::UserAgent;
use JSON;
use Data::Dumper;

our (
    $channel_id,
    $config,
    $channel_file,
    $channel_id_file,
    $pid_file,
    %songs,
    @playlist,
    $player_pid
);

sub init{
    # Set .cmusic directory
    my $user_path = "$ENV{HOME}/.cmusic/";
    -d $user_path or mkdir $user_path;
    ($channel_file, $channel_id_file, $pid_file) = map { "$user_path/$_" } qw(channels channel_id cmusic.pid);

    # Read config
    $config = from_jsonfile('conf/cmusic.json');

    # Set channel id
    $channel_id = file_get_contents($channel_id_file);
    $channel_id or $channel_id = $config->{default_channel_id};
}

sub from_jsonfile{
    my ($file) = @_;
    my $json = file_get_contents($file) or return undef;
    return JSON->new->utf8->decode($json);
}

sub file_get_contents{
    my ($file) = @_;
    open(my $fh, $file) or return undef;
    my $contents = '';
    while (<$fh>){
        $contents.= $_;
    }
    close $fh;
    return $contents;
}

sub file_put_contents{
    my ($file, $contents) = @_;
    open(my $fh, '>', $file) or return 0;
    print $fh $contents;
    close($fh);
}

sub set_channel{
    my ($index) = @_;
    my $channel = from_jsonfile($channel_file) or refresh_channel();
    $channel_id = $channel->{channel_list}->[$index]->{channel_id};
    file_put_contents($channel_id_file, $channel_id);
}

sub http_get{
    my ($url) = @_;
    my $ua = LWP::UserAgent->new;
    $ua->agent('cmusic 2.0');
    $ua->timeout(10);
    $ua->env_proxy;
    my $res = $ua->get($url);
    return ($res->is_success) ? $res->content : '';
}

sub refresh_channel{
    my $html = http_get($config->{channel_list});
    ($html) = grep(/rawChannelList/, split("\n", $html));
    my ($json) = $html =~ m/(\{.*\})/;
    file_put_contents($channel_file, $json);
    my $channel = JSON->new->utf8->decode($json);
    return $channel;
}

sub refresh_playlist{
    my $json = http_get($config->{playlist} . $channel_id);
    my $data = JSON->new->utf8->decode($json);
    my $list = $data->{list};
    my @list_id = map { $_->{id} } @$list;
    add_playlist(@list_id);
}

sub add_playlist{
    push(@playlist, @_);
}

sub get_playlist{
    my ($count) = @_;
    my @list = ();
    for (1 .. $count){
        @playlist or last;
        my $one = shift(@playlist);
        push(@list, $one);
    }
    return @list;
}

sub is_playlist_empty{
    my ($count) = @_;
    return (@playlist < $count);
}

sub refresh_songs{
    my ($count) = @_;
    is_playlist_empty($count) and refresh_playlist();
    my $song_ids = join(',', get_playlist($count));
    my $json = http_get($config->{songs} . $song_ids);
    my $data = JSON->new->utf8->decode($json);
    my $song_list = $data->{data}->{songList};
    my %song_hash = map { ($_->{songId}, $_->{showLink}) } @$song_list;
    add_song(%song_hash);
}

sub add_song{
    my %song_hash = @_;
    for my $key (keys %song_hash){
        $songs{$key} = $song_hash{$key};
    }
}

sub is_songs_empty{
    return (keys(%songs) == 0);
}

sub get_song{
    my ($id, $url) = each %songs;
    delete $songs{$id};
    return ($id, $url);
}

sub play_song{
    is_songs_empty() and refresh_songs(10);
    my ($id, $url) = get_song();
    _player($url);
}

sub _player{
    my ($url) = @_;
    my $cmd = $config->{play_cmd};
    $player_pid = fork();
    if ($player_pid > 0){
        wait;
    } elsif ($player_pid == 0){
        exec(@$cmd, $url);
    }
}

sub main{
    my $action = shift(@ARGV);
    my %funs = (
        'list|l'   => 'list',
        'play|p'   => 'play',
        'stop|k'   => 'stop',
        'help'     => 'help',
    );
    if ($action and my ($key) = grep { $action =~ /^($_)$/; } keys %funs){
        return $funs{$key}->(@ARGV);
    } else {
        return help();
    }
}

sub list{
    my $channel = refresh_channel()->{channel_list};
    my $i = 0;
    for (@$channel){
        printf("%2d\t%s\n", $i, encode_utf8($_->{channel_name}));
        $i ++;
    }
}

sub play{
    @_ and set_channel(@_);
    stop();
    daemon();
    file_put_contents($pid_file, $$);
    while (1){
        play_song();
    }
}

sub stop{
    my $pid = file_get_contents($pid_file);
    if (kill(0, $pid)){
        kill(SIGTERM, $pid);
    }
}

sub kill_and_exit{
    $player_pid and kill(SIGTERM, $player_pid);
    exit(0);
}

sub help{
    print "CMusic 2.0, play online music, enjoy!\n";
    print "Useage: cmusic [options][args]\n\n";
    print "Options:\n";
    print "list|l                  List all channels\n";
    print "play|p [channel_index]  Start playing music\n";
    print "stop|k                  Stop play\n";
    print "help                    Show this message\n";
    print "\n\nMail bug reports and suggestions to <chenyaosf\@gmail.com>.\n";
}

sub daemon{
    my $pid = fork();
    if ($pid == 0){ 
        #umask 0;
        POSIX::setsid();
        close STDIN;
        close STDOUT;
        close STDERR;
        open STDIN, '/dev/null';
        open STDOUT, '+>/dev/null';
        open STDERR, '+>/dev/null';
    } elsif ($pid > 0) {
        exit 0;
    } else {
        exit 1;
    }
}

init();
main();
